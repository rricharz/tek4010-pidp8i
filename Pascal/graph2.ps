program graph2(output);

{ 2019 RR original version for R65 Pascal }
{ 2020 RR converted to OS/8 on PiDP-8 }

{ ***** TEKTRONIX CONSTANTS ***** }
const maxx = 1023; { Tektronix 4010 graphics }
      maxy = 780;

      maxcolumns = 74; { Tektronix 4010 alpha }
      maxlines   = 35;

      solid      = 1;
      dotted     = 2;
      dotdash    = 3;
      shortdash  = 4;
      longdash   = 5;

      pi         = 3.141592654;

{ ***** TEKTRONIX VARIABLES ****** }

var   xs,ys: integer;

{ ***** USER PROGRAM VARIABLES ***** }

    mask:array[0..maxx] of integer;
    i:integer;
    x1,y1,x2,y2:real;
    x,y,step,max,scale:real;
    sx,sy,dx,dy:real;

{ ***** TEKTRONIX PROCEDURES ***** }

procedure clearscreen;
begin
  write(chr(27),chr(12));
end;

procedure startdraw(x1,y1:integer);
var x,y: integer;
begin
  x:=x1;
  y:=y1;
  if x<0 then x:=0;
  if x>=maxx then x:=maxx-1;
  if y<0 then y:=0;
  if y>=maxy then y:=maxy;
  write(chr(29));
  write(chr((y div 32)+32));
  write(chr((y mod 32)+96));
  write(chr((x div 32)+32));
  write(chr((x mod 32)+64));
  xs:=x;
  ys:=y;
end;

procedure draw(x2,y2:integer);
var x,y: integer;
    hxchange,lychange:boolean;
begin
  x:=x2;
  y:=y2;
  if x<0 then x:=0;
  if x>=maxx then x:=maxx-1;
  if y<0 then y:=0;
  if y>=maxy then y:=maxy;
  if (y div 32)<>(ys div 32) then
    write(chr((y div 32)+32));
  hxchange:=(x div 32) <> (xs div 32);
  lychange:=(y mod 32) <> (ys mod 32);
  if hxchange or lychange then
    write(chr((y mod 32)+96));
  if hxchange then
    write(chr((x div 32)+32));
  write(chr((x mod 32)+64));
  xs:=x;
  ys:=y;
end;

procedure enddraw;
begin
  write(chr(31));
end;

procedure drawvector(x1,y1,x2,y2:integer);
begin
  startdraw(x1,y1);
  draw(x2,y2);
  enddraw;
end;

procedure drawrectange(x1,y1,x2,y2:integer);
begin
  startdraw(x1,y1);
  draw(x2,y1);
  draw(x2,y2);
  draw(x1,y2);
  draw(x1,y1);
  enddraw;
end;

procedure moveto(x1,y1: integer);
{ move in graphics coordinate space }
begin
  startdraw(x1,y1);
  enddraw;
end;

procedure setchsize(size:integer);
{ set character size }
begin
  if (size>=1)and(size <= 4) then begin
    write(chr(27));
    write(chr(ord('7') + size));
  end;
end;

procedure setlinemode(tp:integer);
begin
  if (tp>=solid)and(tp<=longdash) then begin
    write(chr(27));
    write(chr(95+tp));
  end;
end;

procedure drawcircle(x,y,r:integer);
{ draw a circle, very slow! }
var i,x2,y2: integer; arg:real;
begin
  startdraw(x+r,y);
  for i:=0 to r do begin
    arg:=i*2.0*pi/r;
    x2:=x+trunc(r*cos(arg));
    y2:=y+trunc(r*sin(arg));
    draw(x2,y2);
  end;
  enddraw;
end;

{ ***** USER PROGRAM ***** }

function f1(x,y:real):real;
begin
  f1:=sin(pi/180.0 * 2.0 * (x+y));
end;

procedure drawvec(x1,y1,x2,y2:integer);
{ draw vector, do not leave graphics mode }
{ to avoid cursor showing up }
begin
  startdraw(x1,y1);
  draw(x2,y2);
end;

procedure drawmasked(x1,y1,x2,y2:integer;
                visible:boolean);
var i,start,vstart:integer;
    dodraw:boolean;
    step,v:real;
begin
  if x2 = x1 then step:=y2-y1
  else begin
    step:=(y2-y1)/(x2-x1);
    if (x2-x1)<0 then step:=-step
  end;

  dodraw:=false;
  v:=y1;
  start:=x1;
  vstart:=y1;

  for i:=x1 to x2-1 do begin
    if trunc(v)<=mask[i] then begin
      { hidden point }
      if dodraw then begin
        { draw up to here }
        if ((i-x1)>1) and visible then
          drawvec(start,vstart,i,trunc(v));
      end;
      dodraw:=false;
    end
    else begin
      { visible point }
      mask[i]:=trunc(v);
      if not dodraw then begin
        { draw from here }
        start:=i;
        vstart:=trunc(v);
      end;
      dodraw:=true;
    end;
    v:=v+step;
  end;

  for i:=x1 downto x2+1 do begin
    if trunc(v)<=mask[i] then begin
      { hidden point }
      if dodraw then begin
        { draw up to here }
        if ((x1-i)>1) and visible then
          drawvec(start,vstart,i,trunc(v));
      end;
      dodraw:=false;
    end
    else begin
      { visible point }
      mask[i]:=trunc(v);
      if not dodraw then begin
        { draw from here }
        start:=i;
        vstart:=trunc(v);
      end;
      dodraw:=true;
    end;
    v:=v+step;
  end;

  if dodraw and visible {and (x2<>start)} then
    drawvec(start,vstart,x2,y2);
  if y2<mask[x2] then
    mask[x2]:=y2;
end;

begin
  sx:=maxx/2.0;
  sy:=maxy/8.0;
  dx:=6.0;
  dy:=3.0;

  clearscreen;
  write('OS/8 on PiDP-8: sin(x+y)');

  step:=10.0;
  max:=360.0;
  scale:=50.0;

  dx:=maxx/(2.2*max);
  dy:=dx/2.0;

  for i:=0 to maxx do mask[i]:=0;

  { Generate a first mask }
  x:=0.0;
  y:=0.0;
  x1:=dx*x-dx*y;
  y1:=dy*x+dy*y+f1(x,y)*scale;
  x:=0.0;
  while x<max do begin
    x2:=dx*x-dx*y;
    y2:=dy*x+dy*y+f1(x,y)*scale;
    drawmasked(trunc(x1+sx),trunc(y1+sy)-1,
      trunc(x2+sx),trunc(y2+sy)-1,false);
    x1:=x2;
    y1:=y2;
    x:=x+step;
  end;

  startdraw(1,1);

  x:=0.0;
  while x<(max+step) do begin
    y:=0.0;
    x1:=dx*x-dx*y;
    y1:=dy*x+dy*y+f1(x,y)*scale;
    y:=0.0;
    while y<max do begin
      y:=y+step;
      x2:=dx*x-dx*y;
      y2:=dy*x+dy*y+f1(x,y)*scale;
      drawmasked(trunc(x1+sx),trunc(y1+sy)-1,
        trunc(x2+sx),trunc(y2+sy)-1,true);
      x1:=x2;
      y1:=y2;
    end;
    x:=x+step;
  end;

  for i:=0 to maxx do mask[i]:=0;

    { Generate a first mask }
  x:=0.0;
  y:=0.0;
  x1:=dx*x-dx*y;
  y1:=dy*x+dy*y+f1(x,y)*scale;
  y:=0.0;
  while y<max do begin
    x2:=dx*x-dx*y;
    y2:=dy*x+dy*y+f1(x,y)*scale;
    drawmasked(trunc(x1+sx),trunc(y1+sy)-1,
      trunc(x2+sx),trunc(y2+sy)-1,false);
    x1:=x2;
    y1:=y2;
    y:=y+step;
  end;

  y:=0.0;
  while y<(max+step) do begin
    x:=0.0;
    x1:=dx*x-dx*y;
    y1:=dy*x+dy*y+f1(x,y)*scale;
    x:=0.0;
    while x<max do begin
      x:=x+step;
      x2:=dx*x-dx*y;
      y2:=dy*x+dy*y+f1(x,y)*scale;
      drawmasked(trunc(x1+sx),trunc(y1+sy)-1,
        trunc(x2+sx),trunc(y2+sy)-1,true);
      x1:=x2;
      y1:=y2;
    end;
    y:=y+step;
  end;

  moveto(1,50);
  enddraw;

end.